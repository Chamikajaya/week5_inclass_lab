#include <iostream>
#include <cstdlib>
#include <ctime>
#include <iomanip>
#include <stack>

using namespace std;

void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}

int partition(int arr[], int low, int high)
{
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++)
    {
        if (arr[j] < pivot)
        {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high)
{
    stack<int> stack;

    stack.push(low);
    stack.push(high);

    while (!stack.empty())
    {
        high = stack.top();
        stack.pop();
        low = stack.top();
        stack.pop();

        int pi = partition(arr, low, high);

        if (pi - 1 > low)
        {
            stack.push(low);
            stack.push(pi - 1);
        }

        if (pi + 1 < high)
        {
            stack.push(pi + 1);
            stack.push(high);
        }
    }
}

int main()
{
    cout << "Iterative  quickSort";
    cout << endl;
    srand(time(0));
    int arr_sizes[] = {5000, 10000, 100000, 200000, 500000,600000,  800000, 1000000, 1200000, 1500000, 1800000, 2000000};

    for (int i = 0; i < sizeof(arr_sizes)/sizeof(arr_sizes[0]); i++) {
        int arr_size = arr_sizes[i];
        int* arr = new int[arr_size];

        for (int j = 0; j < arr_size; j++)
        {
            arr[j] = rand() % arr_size;
        }

        clock_t start, end;
        start = clock();

        quickSort(arr, 0, arr_size - 1);

        end = clock();
        double time_taken = double(end - start) / double(CLOCKS_PER_SEC);
        cout << "Time taken for array size " << arr_size << " is: " <<  time_taken * 1000 << " in milliseconds" << endl;

        delete[] arr;
    }

    return 0;
}
